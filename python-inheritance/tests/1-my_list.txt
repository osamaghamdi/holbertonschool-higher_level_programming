# 1-my_list.txt

=======================
How to Use 1-my_list.py
=======================

This file demonstrates usage and behavior of the ``MyList`` class from ``1-my_list.py``.
``MyList`` is a subclass of Python's built-in ``list`` with an added ``print_sorted`` method.

Instantiation
=============

You can instantiate ``MyList`` with no arguments (returns an empty list):

::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>
    >>> print(my_list)
    []

Or with a single iterable argument:

::

    >>> my_list = MyList([1, 2, 3])
    >>> print(my_list)
    [1, 2, 3]

Passing None or more than one argument raises a TypeError:

::

    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable

    >>> my_list = MyList([1, 2], [3, 4])
    Traceback (most recent call last):
    TypeError: list() takes at most 1 argument (2 given)

Usage
=====

``MyList`` supports all standard list operations:

::

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> print(my_list)
    [1, 2, 3]

You can modify elements by index:

::

    >>> my_list[0] = 5
    >>> print(my_list)
    [5, 2, 3]

And remove elements:

::

    >>> my_list.remove(5)
    >>> print(my_list)
    [2, 3]

Refer to Python's list documentation for more methods.

print_sorted Method
==================

``MyList`` adds a public instance method ``print_sorted(self)`` that prints the list in ascending order.

::

    >>> my_list = MyList()
    >>> print(my_list.print_sorted)
    <bound method MyList.print_sorted of []>

The method takes no arguments:

::

    >>> my_list.print_sorted(1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

It prints the sorted list without modifying the original:

::

    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]
    >>> print(my_list)
    [1, 4, 2, 3, 5]

Sorting strings works lexicographically:

::

    >>> my_list = MyList()
    >>> my_list.append("Brennan")
    >>> my_list.append("Poppy")
    >>> my_list.append("School")
    >>> my_list.append("Holberton")
    >>> my_list.append("Betty")
    >>> print(my_list)
    ['Brennan', 'Poppy', 'School', 'Holberton', 'Betty']
    >>> my_list.print_sorted()
    ['Betty', 'Brennan', 'Holberton', 'Poppy', 'School']
    >>> print(my_list)
    ['Brennan', 'Poppy', 'School', 'Holberton', 'Betty']

Empty lists print as empty:

::

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []

Mixing types that cannot be compared will raise a TypeError:

::

    >>> my_list = MyList([1, "Betty", "Holberton", 5])
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: '<' not supported between instances of 'str' and 'int'